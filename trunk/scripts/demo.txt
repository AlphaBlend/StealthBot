#include "\demo\frm.txt"
#include "\demo\sck.txt"

' // store script data
Script("Name") = "Demo"
Script("Author") = "Eric[nK]"
Script("Major") = 1
Script("Minor") = 0
Script("Revision") = 1

' // create instance of demo class
Set cls = New CDemoClass

Sub Event_Load()

	'// create demo command
	Dim demoCommand
	Set demoCommand = OpenCommand("demo")
	If demoCommand Is Nothing Then
		Set demoCommand = CreateCommand("demo")
		demoCommand.RequiredRank = 1

		With demoCommand.NewParameter("Word", False, "Word")
			.Description "A 'Word' Argument is a One word string, no spaces are allowed!"
		End With


		With demoCommand.NewParameter("Number", False, "Number")
			.Description "A 'Number' Argument is like a 'Word' argument, but it must pass IsNumberic()"
		End With

		With demoCommand.NewParameter("String", False, "String")
			.Description "A 'String' Argument is a series of words, if it starts with a '" & chr(34) & "' it will attempt to find the ending '" & chr(34) & "', You can escape '" & chr(34) & "'s but putting a \ in front of them, '\" & chr(34) & "', You can escape '\'s by putting another '\' in front of them '\\'"
		End With

		demoCommand.Save
	End If
	Set demoCommand = Nothing


	' // create Winsock object
	'CreateObj "Winsock", "sck"

	' // set Winsock object properties
	'With sck
	'	.RemoteHost = "uswest.battle.net"
	'	.RemotePort = 6112
	'	.Connect
	'End With

	' // create LongTimer object
	'CreateObj "LongTimer", "LTimer"

	' // set LongTimer object properties
	'With LTimer
	'	.Interval = 60
	'	.Enabled = True
	'End With

	' // create Form object
	'CreateObj "Form", "frm"

	' // create Menu objects
	'CreateObj "Menu", "mnu"
	'CreateObj "Menu", "submnu"

	' // set submnu as child of mnu
	'submnu.Parent = mnu

	' // set menu captions
	'mnu.Caption = "menu"
	'submnu.Caption = "submenu"

	' // show form
	'frm.Show

End Sub

' LTimer event sub
Sub LTimer_Timer()

   'AddChat vbBlue, "LTimer_Timer()"

End Sub

Sub Event_PacketReceived(Protocol, ID, Length, Data)
   
   If (Protocol = "BNCS") Then
      If (ID = &H65) Then
         AddChat vbYellow, "RECEIVED BNCS FRIENDS LIST"
      End If
   End If

End Sub

Sub Event_PacketSent(Protocol, ID, Length, Data)

   If (Protocol = "BNCS") Then
      If (ID = &H65) Then
         AddChat vbYellow, "SENT BNCS FRIENDS LIST REQUEST"
      End If
   End If

End Sub

Sub submnu_Click()

   AddChat vbBlue, "submnu_Click()"

End Sub

Sub TestDemo()

   AddChat vbBlue, "TestDemo()"

End Sub

Sub Event_PressedEnter(Text)

	'TestCommand Text, BotVars.Username
	
End Sub

Sub Event_UserTalk(Username, Flags, Message, Ping)
	
	'TestCommand Message, Username

End Sub

Private Sub TestCommand(strText, strUsername)

	'// testing command stuff
	Set cmds = IsCommand(strText, strUsername)
	If cmds.Count > 0 Then
		For Each cmd In cmds
			If cmd.HasAccess = True Then
			
				If cmd.docs.Name = "demo" And cmd.HasCorrectSyntax = True Then
					'// have the awesome command
					AddQ "I know I am awesome, " & strUsername & ", but why did you use " & cmd.Arguments.Count & " argument to tell me that?"				
				End If
			
				DebugCommand cmd

			End If
		Next
	End If

End Sub


Sub DebugCommand(ByRef cmd)

	'// using a fixed width font
	f = "Lucida Console"

	AddChat f, vbGreen, "Command.Name             ", f, vbCyan , ":= ", f, vbWhite, "[", f, vbYellow, cmd.Name, f, vbWhite, "]"
	AddChat f, vbGreen, "Command.Args             ", f, vbCyan , ":= ", f, vbWhite, "[", f, vbYellow, cmd.Args, f, vbWhite, "]"
	AddChat f, vbGreen, "Command.HasAccess        ", f, vbCyan , ":= ", f, vbWhite, "[", f, vbYellow, cmd.HasAccess, f, vbWhite, "]"
	AddChat f, vbGreen, "Command.PublicOutput     ", f, vbCyan , ":= ", f, vbWhite, "[", f, vbYellow, cmd.PublicOutput, f, vbWhite, "]"
	AddChat f, vbGreen, "Command.HasCorrectSyntax ", f, vbCyan , ":= ", f, vbWhite, "[", f, vbYellow, cmd.HasCorrectSyntax, f, vbWhite, "]"
	If cmd.PublicOutput Then AddQ "Command.Args := " & "[" & cmd.Args & "]"
	For Each arg In cmd.Arguments
		If cmd.PublicOutput Then AddQ "  Command.Argument := " & "[" & arg & "]"
		AddChat f, vbGreen, "  Argument               ", f, vbCyan , ":= ", f, vbWhite, "[", f, vbYellow, arg , f, vbWhite, "]"
	Next
	AddChat f, vbCyan, "------------------------------------------------------"
End Sub

Sub Event_Command(Command, Response)
	Select Case LCase(Command.Name)
		Case "demo":
			If (Not Command.IsValidCommand) Then
				Response(0) = "Use the proper syntx for this command! /demo <word> <number> <string>"
			Else
				Response(0) = "Your Parameters were as follows"
				Response(1) = "Word:   " & Command.Argument("Word")
				Response(2) = "Number: " & Command.Argument("Number")
				Response(3) = "String: " & Command.Argument("String")
			End If
	End Select
End Sub


' // demo class module
Class CDemoClass

   ' // demo class default constructor
   Sub Class_Initialize()
      'MsgBox Script("Name")
   End Sub

End Class