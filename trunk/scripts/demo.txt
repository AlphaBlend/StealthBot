#include "\demo\frm.txt"
#include "\demo\sck.txt"

' // store script data
Script("Name") = "Demo"
Script("Author") = "Eric[nK]"
Script("Major") = 1
Script("Minor") = 0
Script("Revision") = 1

' // create instance of demo class
Set cls = New CDemoClass

Sub Event_Load()

	
	Dim soundexCommand, soundexWordParameter
	'// check if command exists
	Set soundexCommand = OpenCommand("soundex")
	If soundexCommand Is Nothing Then
		'// it does not, lets create the command
		Set soundexCommand = CreateCommand("soundex")
		With soundexCommand
			'// ... and add a property
			Set soundexWordParameter = .NewParameter("word", False, "word")
			With soundexWordParameter
				.Description = "The word you wish to calculate the soundex value of."
			End With
			.Parameters.Add soundexWordParameter
			'// set the access level required to use this command
			.RequiredRank = 1
			'// save the command
			.Save
		End With
	End If
	Set soundexWordParameter = Nothing
	Set soundexCommand = Nothing


	' // create Winsock object
	'CreateObj "Winsock", "sck"

	' // set Winsock object properties
	'With sck
	'	.RemoteHost = "uswest.battle.net"
	'	.RemotePort = 6112
	'	.Connect
	'End With

	' // create LongTimer object
	'CreateObj "LongTimer", "LTimer"

	' // set LongTimer object properties
	'With LTimer
	'	.Interval = 60
	'	.Enabled = True
	'End With

	' // create Form object
	'CreateObj "Form", "frm"

	' // create Menu objects
	'CreateObj "Menu", "mnu"
	'CreateObj "Menu", "submnu"

	' // set submnu as child of mnu
	'submnu.Parent = mnu

	' // set menu captions
	'mnu.Caption = "menu"
	'submnu.Caption = "submenu"

	' // show form
	'frm.Show

End Sub

' LTimer event sub
Sub LTimer_Timer()

   'AddChat vbBlue, "LTimer_Timer()"

End Sub

Sub Event_PacketReceived(Protocol, ID, Length, Data)
   
'   If (Protocol = "BNCS") Then
'      If (ID = &H65) Then
'         AddChat vbYellow, "RECEIVED BNCS FRIENDS LIST"
'      End If
'   End If

End Sub

Sub Event_PacketSent(Protocol, ID, Length, Data)

'   If (Protocol = "BNCS") Then
'      If (ID = &H65) Then
'         AddChat vbYellow, "SENT BNCS FRIENDS LIST REQUEST"
'      End If
'   End If

End Sub

Sub submnu_Click()

   AddChat vbBlue, "submnu_Click()"

End Sub

Sub TestDemo()

'   AddChat vbBlue, "TestDemo()"

End Sub

Sub Event_UserTalk(Username, Flags, Message, Ping)
    HandleCommand Message, Username, 1
End Sub
Sub Event_WhisperFromUser(Username, Flags, Message, Ping)
	HandleCommand Message, Username, 3
End Sub
Sub Event_PressedEnter(Text)
	HandleCommand Text, BotVars.Username, 4
End Sub


Private Sub HandleCommand(strText, strUsername, Origin)

	'// testing command stuff
	Set cmds = IsCommand(strText, strUsername)
	If cmds.Count > 0 Then
		For Each cmd In cmds

'// debug all commands
DebugCommand cmd


			'// this doesnt work yet
			'If cmd.HasAccess = True Then
				
				'// this doesnt work yet either
				'If cmd.docs.Name = "soundex" And cmd.HasCorrectSyntax = True Then
				If cmd.docs.Name = "soundex" Then
					'// have the soundex command do something
					Dsp Origin, Soundex(cmd.Argument("word"))
				'ElseIf cmd.docs.Name = "othercommand"
				'	'// do othercommand stuff
				Else
					'// debug any command that is not handled
					DebugCommand cmd
				End If
			'End If
		Next
	End If

End Sub

Function Soundex(ByVal word)
    Dim result
    Dim i, acode
    Dim dcode, oldCode
    
    ' soundex is case-insensitive
    word = UCase(word)
    ' the first letter is copied in the result
    Soundex = Left(word, 1)
    oldCode = Asc(Mid("01230120022455012623010202", Asc(word) - 64))
    
    For i = 2 To Len(word)
        acode = Asc(Mid(word, i, 1)) - 64
        ' discard non-alphabetic chars
        If acode >= 1 And acode <= 26 Then
            ' convert to a digit
            dcode = Asc(Mid("01230120022455012623010202", acode, 1))
            ' don't insert repeated digits
            If dcode <> 48 And dcode <> oldCode Then
                Soundex = Soundex & Chr(dcode)
                If Len(Soundex) = 4 Then Exit For
            End If
            oldCode = dcode
        End If
    Next
End Function

'// outputs detailed information about a command
Sub DebugCommand(ByRef cmd)

	'// using a fixed width font
	f = "Lucida Console"

	AddChat f, vbGreen, "Command.Name             ", f, vbCyan , ":= ", f, vbWhite, "[", f, vbYellow, cmd.Name, f, vbWhite, "]"
	AddChat f, vbGreen, "Command.Args             ", f, vbCyan , ":= ", f, vbWhite, "[", f, vbYellow, cmd.Args, f, vbWhite, "]"
	AddChat f, vbGreen, "Command.HasAccess        ", f, vbCyan , ":= ", f, vbWhite, "[", f, vbYellow, cmd.HasAccess, f, vbWhite, "]"
	AddChat f, vbGreen, "Command.PublicOutput     ", f, vbCyan , ":= ", f, vbWhite, "[", f, vbYellow, cmd.PublicOutput, f, vbWhite, "]"
	AddChat f, vbGreen, "Command.IsValidCommand   ", f, vbCyan , ":= ", f, vbWhite, "[", f, vbYellow, cmd.IsValidCommand, f, vbWhite, "]"
	If cmd.PublicOutput Then AddQ "Command.Args := " & "[" & cmd.Args & "]"
	i = 0
	For Each arg In cmd.Arguments
		If cmd.PublicOutput Then AddQ "  Command.Arguments(" & i & ") := " & "[" & arg & "]"
		AddChat f, vbGreen, "  Arguments(" & i & ")" & vbTab, f, vbCyan , ":= ", f, vbWhite, "[", f, vbYellow, arg , f, vbWhite, "]"
		i = i + 1
	Next
	For Each parm In cmd.docs.Parameters
		If cmd.PublicOutput Then AddQ "  Command.Argument(" & parm.Name & ") := " & "[" & cmd.Argument(parm.Name) & "]"
		AddChat f, vbGreen, "  Argument(""" & parm.Name & """)" & vbTab, f, vbCyan , ":= ", f, vbWhite, "[", f, vbYellow, cmd.Argument(parm.Name) , f, vbWhite, "]"
	Next
	AddChat f, vbCyan, "------------------------------------------------------"
End Sub


' // demo class module
Class CDemoClass

   ' // demo class default constructor
   Sub Class_Initialize()
      'MsgBox Script("Name")
   End Sub

End Class