'0.979999

'// ^^ Leave at .979999


'// The Plugin System
'//   by Swent
'//     Last Modified 9:57 PM 10/5/2007 by Swent


'////////////////////////////////////////
'// StealthBot 2.7 Development Version //
'////////////////////////////////////////

'// CHANGES / NOTES ON THIS VERSION:
'// The following subs/functions normally found in the PS have been removed, rewritten and integrated in SB
'//   1) Dsp
'//   2) SetSetting
'//   3) GetSetting
'//   4) More to come...

'// So be sure that you have the new version of ScriptSupportClass.cls
'// You also need the updated version of frmChat for the PS to load properly


'//**********************************//
'//  CHANGE LOG                      //
'//**********************************//
 
'// The full change log can be found here: http://stealthbot.net/p/plugs/changelog

'// ver .98 (BETA)

'//   [MODIFICATIONS]
'//   *Modified the Plugin System to make it compatiable with StealthBot v2.7
'//      -You can now use the FirstRun, MessageSent, Shutdown, LoggedOff, and the 9 new clan-related events in your plugins (see SSC)
'//      -Added the new Event arguements: Banned (UserJoins) and StatUpdate (UserInChannel) - see the SSC
'//         ~These will be automatically added to any UserJoins/UserInChannel events found missing them (Thanks Draco)
'//      -For compatibility reasons there is now a version check. You must have SB v2.7 or higher to use the Plugin System.
'//   *Modified the external .plugins response with an enabled/disabled indicator
'//      -Prefixes of disabled plugins are inside parenthesis
'//   *When talking inside the bot, outgoing messages will be split up automatically if they exceed the SB char limit (220)
'//      -Messages exceeding the limit that begin with "/" or your bot trigger will not be split (Thanks ZergMasterI)
'//   *The phelp command can now be used externally (it will only display commands): .phelp <prefix>
'//   *Minimized occurence of Runtime Error '-2147467259' by increasing the timeout to 15 seconds
'//   *Modified /plugins and /updates outputs -- now extremely sexy thanks to the new capabilites of AddChat (Thanks Jack)
'//   *Made the prefix validity check more thorough (now checks for repeats, invalid chars, and disallowed prefixes)
'//   *Revamped the settings system. Plugin settings are now located in settings.ini
'//      -Removed the /lset command as it is no longer neccessary
'//      -Changes to settings.ini now take effect after immediately after saving the file (You do not need to type "/lset" or hit Reload Script)
'//      -Setting descriptions relocated into the /phelp command response.
'//   *Opened up the updates, getplugin and delplugin commands to external usage by Bot Owner only (Thanks RoNiN)
'//      -In the external updates output, only prefixes are displayed. Key: New, [Updated], (Installed)
'//   *Increased plugin load efficiency -- load time should be noticeably decreased (Thanks ZergMasterI)
'//   *Replaced all Plugin System usaged of vbBlue with psLightBlue, which is much easier on the eyes
'//   *Custom vbColor global names changed: psOrange, psBrown, psPink, psGrey, psLightBlue
'//   *Plugin and Plugin System update checks now only take place once after connection
'//   *Improved error handling during plugin load. Loading errors will now be more descriptive (Thanks ZergMaster)
'//      -Plugins with errors on load will be disabled automatically (to avoid the constant error messages on every event)
'//   *Improved error handling while plugins are being loaded (Thanks ZergMasterI)
'//      -Errors recieved during plugin loading now show correct offending lines and line/column numbers, and the erroring plugin will be blocked
'//         ~A plugin being "blocked" is pretty much the same as disabled -- except it's temporary. The blocked status disappears on reload.
'//      -Errors recieved with debug mode on will now show correct line and column numbers as well

'//   [NEW FEATURES]
'//   *Added multiple command messages. As in StealthBot, you can now type: ".crs off; ss on; pelt me" etc.
'//      -This will work for Plugin System commands as well as all of your plugins' commands (No StealthBot commands)
'//      -This option can be disabled by setting the new "multipleCmdMsgs" plugin system setting to False
'//   *Added the option to back up plugins during updates by adding the "backup" setting for all plugins
'//      -Set to False by default. If changed to True, that plugin will be backed up when you download updates.
'//      -Alternatively, you can set the global "backup" PS setting to True, and it will apply to all plugins.
'//      -When True, the global "backup" PS setting overrides the individual "backup" plugin settings
'//   *Added Plugin System News which will displayed when you open the bot (Thanks Jack)
'//      -Can be disabled by setting the new "newsDisabled" plugin system setting to True
'//   *Added settings that allow you to set access requirements for external Plugin System commands:
'//      -"prefix_cmd_access" (default 100), "plugins_cmd_access" (default 20), and "phelp_cmd_access" (default 20)
'//   *Added double-slash Plugin System commands. Inside bot type "//command" to have the response displayed publicly.
'//      -This will work for all Plugin System commands except /updates and /psnews
'//   *Added Plugin System help in /phelp command -- displays command names and explanations (Thanks raylu)
'//   *Added support for colons on the 4th phelp line (important notes) -- use "\c" for colon (Thanks ZergMasterI)
'//   *Added a useful global: psConUptime - holds current connection uptime in seconds
'//   *Added some helpful links at the completion of the installation (Thanks Snap)
'//   *Added two more useful subs: PluginEnabled and GetPluginEnabled. See usage notes below.
'//   *Added StealthBot menu support for the Plugin System
'//      -In the new Scripts menu you'll find menus for each plugin
'//      -In these menus you can change enabled, nvn, and backup statuses, as well items for help and opening the plugin file
'//      -There is also a main help menu which provides links to revelant forums/threads.
'//      -5 subs/functions have been added to help you add and work with menu items for your plugin. See development notes below.
'//      -You can disable plugin menu creation by setting the menusDisabled PS setting to True (Thanks ZergMasterI)
'//   *Implemented #define's Plugin Creator. Can be executed from the Plugin System menu (Thanks #define)

'//   [NEW COMMANDS]
'//    /delplugin <prefix>
'//      -Deletes the specified plugin from your plugins folder. A backup is created automatically.
'//      -To delete a plugin forever (no backup), add a parameter of "1". Example: /delplugin crs 1
'//    /psnews
'//      -Displays the Plugin System news
'//    /pedit <prefix>
'//      -Opens the specified plugin for editing. This command has a few alternate functions:
'//         ~You can use a filename (ex: pmPeltMe.plug) in place of <prefix>, as long as it's in the plugins folder
'//         ~You can open your settings.ini file by omitting the <prefix> parameter
'//         ~You can open your plugins folder by using "plugins" for <prefix> (Thanks Jack)

'//   [BUG FIXES]
'//   *Fixed a bug in the debug command...lol (Thanks Jack)
'//   *Fixed minor error with the dsp sub -- it no longer attempts to split messages that have no spaces (Thanks Jack)
'//   *Fixed a problem with the plugin timer error handler -- sometimes it displayed the wrong file path
'//   *Fixed an error with the LoadSettings sub when a setting value contained "=" (Thanks Jack)
'//   *Fixed a minor bug with the .prefix on/off command (Thanks ZergMasterI)
'//   *Fixed a minor problem with the error handler related to "/prefix on" commands
'//   *Fixed a major changing variable issue (due to VBS's suckiness) by adding the Echo function (Thanks ZergMasterI)
'//   *Fixed a problem with the plugin converter in the case of a file already being partially converted (some/all events already prefixed)
'//      -Existing prepends found on event lines will be replaced with the correct prefix or ignored if it's already correct
'//   *Fixed a plugin converter error for users with certain language settings (Thanks fagju)


'// TODO BEFORE PUBLIC RELEASE
'//   Change the version check to 2.7


'//******************************************************//
'//  USEFUL NOTES FOR PLUGIN DEVELOPMENT                 //
'//******************************************************//

'// [ Settings Subs/Functions ]
 
'// - SetSetting
'// Syntax: SetSetting "prefix", "SettingName", SettingValue, SettingDescription, Overwrite
'//   Overwrite is a boolean (True or False). Set to True if you want it to overwrite an existing value.
'//   Use "" for the Setting Description parameter and the existing description will be used.
'//   Setting values of any length can now be set and retrieved properly (no longer a 255 char max)
 
'// - GetSetting
'// Syntax: Setting = GetSetting("prefix", "SettingName")
 
 
'// [ Timer Subs/Functions ]
 
'// - TimerInterval
'// Usage: Use to set a timer's interval.
'// Syntax: TimerInterval Prefix, TimerName, Interval
'//   Interval is in seconds (must be an integer).

'// - TimerEnabled
'// Use to enable or disable a timer.
'// Syntax: TimerEnabled Prefix, TimerName, Enabled
'//   Enabled is a boolean (True or False).
 
'// - GetTimerEnabled
'// Use to get a timer's status.
'// Syntax: Enabled = GetTimerEnabled(Prefix, TimerName)
'//   Enabled will hold a boolean (True or False).
 
'// - GetTimeLeft
'// Use to get time left (in seconds) until timer sub is executed.
'// Syntax: timeLeft = GetTimeLeft(Prefix, TimerName)
 
'// - GetTimeWaiting
'// Use to get time (in seconds) since the last time your timer sub was executed.
'// Syntax: timeWaiting = GetTimeWaiting(Prefix, TimerName)


'// [ Plugin Subs/Functions ]

'// - PluginEnabled
'// Use to enable or disable a plugin.
'// Syntax: PluginEnabled Prefix, Enabled
'//   Enabled is a boolean (True or False)

'// - GetPluginEnabled
'// Use to get a plugin's status. Note: This function doesn't account for status of global plugin disablement.
'// Syntax: Enabled = GetPluginEnabled(Prefix)
'//   Enabled will hold a boolean (True or False), or -1 if the plugin doesn't exist.


'// [ Menu Subs/Functions ]

'// - AddMenuItem
'// Use to add an item to a plugin's menu.
'// Syntax: AddMenuItem Prefix, ItemName, Separator, Disabled, Checkmark
'//   Separator, Disabled, and Checkmark are booleans.
'//   If Separator is True, this item is a separator (all other parameters ignored)
'//   If Disabled is True, this item is greyed out and can't be clicked.
'//   If Checkmark is True, this item has a checkmark that can be toggled.
'//   For an item without a checkmark, set Checkmark to -1
'//   You must add the following sub which will be called when this item is clicked:
'//     Sub prefix_Menu_Callback(ItemName)

'// - SetMenuItemCheck
'// Use to change checked status of an item in a plugin menu.
'// Syntax: SetMenuItemCheck Prefix, ItemName, Checked
'//   Checked is a boolean (True or False)

'// - GetMenuItemCheck
'// Use to get the checked status of an item in a plugin menu.
'// Syntax: checkStatus = GetMenuItemCheck(Prefix, ItemName)
'//   checkStatus will hold a boolean (True or False)
'//   If the item isn't check enabled, checkStatus will hold -1

'// - ToggleMenuItemCheck
'// Use to reverse the checked status of an item in a plugin menu.
'// Syntax: ToggleMenuItemCheck Prefix, ItemName

'// - SetMenuItemEnabled
'// Use to enable or disable a plugin menu item. Disabled items are greyed out and not clickable.
'// Syntax: SetMenuItemEnabled Prefix, ItemName, Enabled
'//   Enabled is a boolean (True or False)
 
 
'// [ Message Display Sub ]
 
'// - dsp
'// Syntax: dsp DisplayID, Message, Username, Color
'//   DisplayID must be one of the following integer values:
'//     1 = AddQ
'//     2 = Emote
'//     3 = Whisper
'//     4 = AddChat
'//   Color needs to be a vbColor:
'//     vbGreen, vbRed, vbCyan, vbYellow, vbBlue, vbMagenta, vbBlack, vbWhite, psOrange, psBrown, psPink, psGrey, psLightBlue
'//   Messages of any length can be displayed


'// [ Useful Globals ]

'// - psD2
'// Holds "*" If Bot is using D2. Solves issue with whispering D2 Users.
'//   Example usage: AddQ "/w " & psD2 & Username & " hey!"

'// - psConUptime
'// Holds current connection uptime in seconds

'// - psOrange, psBrown, psPink, psGrey, psLightBlue
'// Holds RBG color values (to supplement available vbColors)
'//   Example usage: AddChat psOrange, "This is orange!"


'// [ Useful Objects ]

'// - psFSO
'// Holds the FileSystemObject object. Use this to work with files and folders
'//   Example usage: psFSO.CreateTextFile("C:\Program Files\StealthBot\test.txt")
'//   Reference: http://msdn2.microsoft.com/en-us/library/6kxy1a51.aspx

'// - psWshShell
'// Holds the Windows Script Host Shell. Use this to run commands/applications.
'//   Example usage: psWshShell.Run "C:\Program Files\Starcraft\Brood.exe"
'//   Reference: http://msdn2.microsoft.com/en-us/library/aew9yb99.aspx

'// - psAppShell
'// Holds the Windows Application Shell. Use this to open files/folders/programs.
'//   Example usage: psAppShell.Open "C:\Program Files\StealthBot\safelist.txt"

'// - psPlugins
'// Holds plugin file paths
'//   Example usage: AddQ "Your crs plugin is located at: " & psPlugins.Item("crs")

'// - psVersions
'// Holds plugin versions
'//   Example usage: AddQ "Your crs plugin's version is: " & psVersions.Item("crs")

 
'//**********************************//
'//  THE PLUGIN SYSTEM               //
'//**********************************//
 
'// [[[ CONSTANT AND GLOBAL DECLARATIONS, OBJECT REFERENCES ]]]

Const PS_UPDATE_PATH = "http://www.stealthbot.net/p/plugs/"
Const PS_AUTO_UPDATE = True
Const PS_ALLOW_UI = True
Const PS_SET_PATH = "plugins\settings.ini"
Const PS_PREFIX_DISALLOW = "|ps|script|protect|phrasebans|ipbans|idle|koy|plugban|chpw|ib|efp|floodmode|"
Const PS_COLORS = "65280,39423" '// Default: Green,Orange
Const PS_TIMEOUT = 15

Public psUpdateCounter  '// holds seconds since last updates check
Public psLoaded         '// holds True if the Plugin System has finished loading
Public psFirstRun       '// holds True if it's the first script load (so at bot opening)
Public psArgsAdded      '// holds True if missing plugin event arguments were added during load
Public psNewContent     '// holds modified plugin content after missing event arguments are added
Public psEventNames     '// holds all possible plugin event names
Public psConUptime      '// holds connection uptime in seconds
Public psD2             '// holds "*" If bot is using D2
 
'// Hold RGB values for custom vbColors (use with AddChat)
Public psGrey, psBrown, psOrange, psPink, psLightBlue

'// Hold RGB values that make up the color scheme
Public psColor1, psColor2

Set psSC = GetScriptControl()
Set psFSO = CreateObject("Scripting.FileSystemObject")
Set psWshShell = CreateObject("WScript.Shell")
Set psAppShell = CreateObject("Shell.Application")
Set psPlugins = CreateObject("Scripting.Dictionary")       '// holds plugin file paths
Set psVersions = CreateObject("Scripting.Dictionary")      '// holds plugin versions
Set psHelp = CreateObject("Scripting.Dictionary")          '// holds plugin help output
Set psEvents = CreateObject("Scripting.Dictionary")        '// holds existing event names
Set psTimerInterval = CreateObject("Scripting.Dictionary") '// holds timer intervals
Set psTimerCount = CreateObject("Scripting.Dictionary")    '// holds timer counts
Set psTimerEnabled = CreateObject("Scripting.Dictionary")  '// holds timer statuses
Set psMenuIDs = CreateObject("Scripting.Dictionary")       '// holds IDs for default plugin menus and items
Set psItemIDs = CreateObject("Scripting.Dictionary")       '// holds IDs for user-generated items
 
 
'// [[[ SETTINGS SUBS/FUNCTIONS ]]]



'// [[[ TIMER SUBS/FUNCTIONS ]]]
 
 
Sub TimerInterval(Prefix, TimerName, Interval)
 
   timerKey = Prefix & ":" & TimerName
   psTimerInterval.Item(timerKey) = Interval
   psTimerCount.Item(timerKey) = Interval
End Sub
 
 
Sub TimerEnabled(Prefix, TimerName, Enabled)
 
   psTimerEnabled.Item(Prefix & ":" & TimerName) = Enabled
End Sub
 
 
Function GetTimerEnabled(Prefix, TimerName)
 
   GetTimerEnabled = psTimerEnabled.Item(Prefix & ":" & TimerName)
End Function
 
 
Function GetTimeLeft(Prefix, TimerName)
 
   GetTimeLeft = psTimerCount.Item(Prefix & ":" & TimerName) - 1
End Function
 
 
Function GetTimerWaiting(Prefix, TimerName)
 
   timerKey = Prefix & ":" & TimerName
   GetTimerWaiting = psTimerInterval.Item(timerKey) - psTimerCount.Item(timerKey) + 1
End Function


'// [[[ PLUGIN SUBS/FUNCTIONS ]]]


Sub PluginEnabled(Prefix, Enabled)

   SetSetting Prefix, "enabled", Enabled, "", True
End Sub


Function GetPluginEnabled(Prefix)

   boolEnabled = GetSetting(Prefix, "enabled")
   If Len(boolEnabled) > 0 Then
      GetPluginEnabled = boolEnabled
   Else
      GetPluginEnabled = -1
   End If
End Function


'// [[[ MENU SUBS/FUNCTIONS ]]]


Sub AddMenuItem(Prefix, ItemName, Separator, Disabled, Checkmark)

   If GetSetting("ps", "menusDisabled") Then Exit Sub

   '// Insert a separator if this is the first item being added
   If Not psItemIDs.Exists(Prefix) Then
      AddScriptMenuItem psMenuIDs.Item(Prefix)(0), 1, 1, 1
      psItemIDs.Item(Prefix) = 1
   Else
      psItemIDs.Item(Prefix) = psItemIDs.Item(Prefix) + 1
   End If

   strRedirectSub = Prefix & "_item" & psItemIDs.Item(Prefix) & "_redirect"

   If Checkmark = -1 Then
      intID = AddScriptMenuItem(psMenuIDs.Item(Prefix)(0), ItemName, strRedirectSub, Separator, Disabled)
   Else
      intID = AddScriptMenuItem(psMenuIDs.Item(Prefix)(0), ItemName, strRedirectSub, Separator, Disabled, Checkmark)
   End If

   psSC.AddCode "Sub " & strRedirectSub & ":" & Prefix & "_Menu_Callback """ & ItemName & """:End " & "Sub"
   psItemIDs.Item(Prefix & "|||" & ItemName) = intID
End Sub


Sub SetMenuItemCheck(Prefix, ItemName, Checked)

   If GetSetting("ps", "menusDisabled") Then Exit Sub

   SetMenuCheck psMenuIDs.Item(Prefix)(0), psItemIDs.Item(Prefix & "|||" & ItemName), Checked
End Sub


Function GetMenuItemCheck(Prefix, ItemName)

   If GetSetting("ps", "menusDisabled") Then Exit Function

   intChange = SetMenuCheck(psMenuIDs.Item(Prefix)(0), psItemIDs.Item(Prefix & "|||" & ItemName), True)

   If intChange = 0 Then
      SetMenuCheck psMenuIDs.Item(Prefix)(0), psItemIDs.Item(Prefix & "|||" & ItemName), False
      GetMenuItemCheck = False
   ElseIf intChange = 1 Then
      GetMenuItemCheck = True
   Else
      GetMenuItemCheck = -1
   End If
End Function


Sub ToggleMenuItemCheck(Prefix, ItemName)

   If GetSetting("ps", "menusDisabled") Then Exit Sub

   SetMenuItemCheck Prefix, ItemName, Not GetMenuItemCheck(Prefix, ItemName)
End Sub


Sub SetMenuItemEnabled(Prefix, ItemName, Enabled)

   If GetSetting("ps", "menusDisabled") Then Exit Sub
   
   SetMenuEnabled psMenuIDs.Item(Prefix)(0), psItemIDs.Item(Prefix & "|||" & ItemName), Enabled
End Sub


'// [[[ MESSAGE DISPLAY SUB ]]]

 

 

'// [[[ INTERNAL SUBS/FUNCTIONS ]]]


Function psEcho(Value)

   psEcho = Value
End Function


Sub psAllowUI()

   allowVal = GetConfigEntry("Other", "ScriptAllowUI", "config.ini")
   If PS_ALLOW_UI And (Len(Trim(allowVal)) = 0 Or allowVal = "N") Then
      WriteConfigEntry "Other", "ScriptAllowUI", "Y", "config.ini"
   End If
End Sub


Function psGetTextStream(Path) 

   Set textStream = psFSO.OpenTextFile(Path, 1)
   psGetTextStream = textStream.ReadAll()
   textStream.Close
End Function


Sub psTriggerLoadEvent(Prefix)

   If Instr(psEvents.Item(Prefix), "load") Then
      If Not GetSetting("ps", "debugmode") Then On Error Resume Next
      Execute(Prefix & "_event_load()")
      If Err.Number <> 0 Then
            AddChat vbRed, "Scripting runtime error '" & Err.Number & "' on """ & Prefix & "_Event_Load" & _
                            """ call in file """ & psFSO.GetFileName(psPlugins.Item(Prefix)) & """"
	    AddChat vbRed, Err.Description & "."
      End If
   End If
End Sub


Function psPrefixCheck(Prefix)

   If psPlugins.Exists(Prefix) Then
      strErr = "already exists"
   Else
      For i = 1 to Len(Prefix)
         val = asc(Mid(prefix, i, 1))
         If Not ((val > 47 And val < 58 And i > 1) Or (val > 64 And val < 91) Or (val > 96 And val < 123)) Then
            strErr = "is invalid"
            Exit For
         End If
      Next
      If Instr(PS_PREFIX_DISALLOW, "|" & Prefix & "|") > 0 Then strErr = "is not allowed"
   End If
   If Len(strErr) > 0 Then psPrefixCheck = "Its prefix """ & Prefix & """ " & strErr
End Function


Function psPrefixExists(Prefix)

   If psPlugins.Exists(Prefix) Or Prefix = "ps" Then
      psPrefixExists = True
   Else
      AddChat vbRed, "Invalid command: None of your loaded plugins have prefix """ & Prefix & """."
   End If
End Function


Function psGetNumericVersion(Version) '// Thanks fagju

   If Left(Version, 1) = "." Then Version = "0" & Version
   arrVersion = Split(Version, ".")

   If UBound(arrVersion) = 0 Then
      If IsNumeric(arrVersion(0)) Then
         psGetNumericVersion = Int(arrVersion(0))
      Else
         psGetNumericVersion = -1
      End If
   Else
      If IsNumeric(arrVersion(0)) And IsNumeric(arrVersion(1)) Then
         psGetNumericVersion = Int(arrVersion(0)) + (arrVersion(1) / (10 ^ Len(arrVersion(1))))
      Else
         psGetNumericVersion = -1
      End If
   End If
End Function


Function psPluginEnabled(Prefix)

   If GetSetting(Prefix, "enabled") And GetSetting("ps", "enabled") Then psPluginEnabled = True
End Function


Sub psDisplayNews(FirstRun)

  If Not FirstRun Or GetSetting("ps", "newsDisabled") Then Exit Sub

  news = scINet.OpenURL(PS_UPDATE_PATH & "news.php")
  If Instr(news, "Plugin System") = 0 Then Exit Sub
  arrNews = Split(news, vbCrLf)
  For i = 0 to UBound(arrNews)
     AddChat 13408512, arrNews(i)
  Next
End Sub


Function psLatestSB()

   If Replace(Split(GetBotVersion())(1), "v", "") < 2.6 Then
      AddChat vbRed, "Error: You must have StealthBot v2.7 to use the Plugin System."
      AddChat vbRed, "Please download the latest version of StealthBot: http://www.stealthbot.net/board/getsb.php"
   Else
      psLatestSB = True
   End If
End Function

 
Sub psSetCompareMode()

   psTimerInterval.CompareMode = 1
   psTimerCount.CompareMode = 1
   psTimerEnabled.CompareMode = 1
   psItemIDs.CompareMode = 1
   psMenuIDs.CompareMode = 1
End Sub
 
 
Sub psCompleteInstall()

   '// Installation already completed?
   If psFSO.FolderExists(BotPath() & "plugins") And psFSO.FileExists(BotPath() & "plugins\settings.ini") Then Exit Sub

   '// Create the plugins folder and settings file
   If Not psFSO.FolderExists("plugins") Then
      If Replace(Split(GetBotVersion())(1), "v", "") >= 2.6 Then
         psFSO.CreateFolder("plugins")
         AddChat 39423, "Added the plugins folder to your StealthBot folder."
      End If
   End If
   If Not psFSO.FileExists("plugins\settings.ini") Then
      If psFSO.FileExists("plugins\pluginsettings.ini") Then psFSO.DeleteFile("plugins\pluginsettings.ini")
      psFSO.CreateTextFile("plugins\settings.ini")
      AddChat 39423, "Added the settings.ini file to your plugins folder."
      AddChat vbGreen, "Installation of the Plugin System successfully completed!"
      AddChat vbWhite, "For a quick explanation of the Plugin System and answers to common questions, visit the Plugin System FAQ:"
      AddChat vbWhite, "http://www.stealthbot.net/board/index.php?showtopic=22229"
      AddChat vbWhite, "For a Plugin System command list and extensive usage information, visit the Plugin System guide:"
      AddChat vbWhite, "http://www.stealthbot.net/board/index.php?showtopic=6052"
      AddChat vbWhite, "For answers to common scripting and plugin questions/problems, visit the scripting Tutorials and FAQs forum:"
      AddChat vbWhite, "http://www.stealthbot.net/board/index.php?showforum=53"
      AddChat vbWhite, "These links can also be found in the Scripts menu under Help."
   End If
End Sub
 

Sub psSetPSColors()
 
   psGrey = 9211020
   psBrown = 1262987
   psOrange = 39423
   psPink = 13408767
   psLightBlue = 13395456

   '// Plugin System color scheme
   psColor1 = Split(PS_COLORS, ",")(0)
   psColor2 = Split(PS_COLORS, ",")(1)
End Sub
 

Sub psCannotConnect()
 
   AddChat vbRed, "Error: Can't establish a connection with the Plugins Server. Possible reasons for this error:"
   AddChat vbRed, "- You may not be connected to the internet."
   AddChat vbRed, "- You may be having DNS resolution issues."
   AddChat vbRed, "- The server (www.stealthbot.net) may be down."
End Sub
 
 
Sub psSplitOutgoingMsg(Text)

   If Left(Text, 1) = "/" Or Left(Text, 1) = BotVars.Trigger Then Exit Sub
   VetoThisMessage
   arrText = Split(Text)
   If Left(Text, 2) = "/w" Then
      Text = Mid(Text, Instr(Text, arrText(2)))         
      dsp 3, Text, arrText(1), 0
   ElseIf Left(Text, 3) = "/me" Or Left(Text, 6) = "/emote" Then
      Text = Mid(Text, Instr(Text, arrText(1)))
      dsp 2, Text, 0, 0
   Else
      dsp 1, Text, 0, 0
   End If
End Sub


Function psOnOff(String)

   '// Used to process commands that have an "on/off" arguement
   If String = "on" Then
      psOnOff = Array(True, "enabled", vbGreen)
   Else
      psOnOff = Array(False, "disabled", vbRed)
   End If
End Function
 
 
Sub psPluginSystemCmds(Message, Username, DisplayID)

   '// Has the Plugin System loaded completely?
   If Not psLoaded Then Exit Sub

   '// Is it a command?
   If Not (Left(Message, 1) = "/" Or (Left(Message, 1) = BotVars.Trigger And Username <> BotVars.Username)) Then Exit Sub

   '// Are they using a double slash?
   If Left(Message, 2) = "//" Then
      DisplayID = 1
      Message = Mid(Message, 2)
   End If

   '// Is it a multiple command message?
   If (Left(Message, 1) = BotVars.Trigger Or Left(Message, 1) = "/") And Instr(Message, "; ") Then
     arrMessage = Split(Mid(Message, 2), "; ")
     ReDim arrCmd(UBound(arrMessage))
     For i = 0 to UBound(arrCmd)
        psPluginSystemCmds Left(Message, 1) & arrMessage(i), Username, DisplayID
     Next
     Exit Sub
   End If

   '// Get the command name and arguements
   If Trim(Message) = vbNullString Or Len(Message) < 2 Then Exit Sub
   cmd = Split(Trim(LCase(Message & " "))): cmdName = Mid(cmd(0), 2)
 
   '// Is it a .[prefix] on/off command?
   If UBound(cmd) = 1 Then
      If (cmd(1) = "on" Or cmd(1) = "off" Or cmd(1) = "status") And cmdName <> "debug" Then
         cmdPrefix = cmdName: cmdName = "prefix"
 
         '// Make sure it's a valid prefix
         If Not (psPlugins.Exists(cmdPrefix) Or cmdPrefix = "ps") Then Exit Sub
      End If
   Else
      If cmdName = "prefix" Then Exit Sub
   End If

   '// Have they entered a plugin system command?
   If Username = BotVars.Username Then
 
      '// Is this a valid internal plugin system command?
      Select Case cmdName
         Case "prefix", "updates", "getplugin", "debug", "lset", "plugins", "nvn", "ext", "phelp", "delplugin", "psnews", "pedit"
            VetoThisMessage
         Case "plist"
         Case Else: Exit Sub
      End Select
   Else
      GetDBEntry Username, myAccess, myFlags
 
      '// Is this a valid external plugin system command and is there sufficient access?
      Select Case cmdName
         Case "prefix", "plugins", "phelp"
            If myAccess < CInt(GetSetting("ps", cmdName & "_cmd_access")) Then Exit Sub
         Case "updates", "getplugin", "delplugin"
            If myAccess < 1000 Then Exit Sub '// Bot Owner only
         Case Else: Exit Sub
      End Select
   End If
 
   '* Command to enable/disable a specified plugin, or all plugins
   If cmdName = "prefix" Then
      arrOnOff = psOnOff(cmd(1))
      SetSetting cmdPrefix, "enabled", arrOnOff(0), "", True
      If cmdPrefix = "ps" Then
         If Not arrOnOff(0) Then
            dsp DisplayID, "Plugins have been globally disabled.", Username, vbRed
         Else
            dsp DisplayID, "Plugins are no longer globally disabled.", Username, vbGreen
            psExecuteEvent "Load", Array(vbNullString)
         End If
      Else
         dsp DisplayID, "The " & cmdPrefix & " plugin has been " & arrOnOff(1) & ".", Username, arrOnOff(2)
         If arrOnOff(0) Then psTriggerLoadEvent(cmdPrefix)
      End If

      '// Toggle enabled checkmark in plugin menu
      If cmdPrefix = "ps" Then boolEnabled = Not arrOnOff(0) Else boolEnabled = arrOnOff(0) End If
      SetMenuCheck psMenuIDs.Item(cmdPrefix)(0), psMenuIDs.Item(cmdPrefix)(1), boolEnabled
 
   '* Command to view all new plugins and updates available for download - Thanks SoCxFiftyToo!
   ElseIf cmdName = "updates" Then
      Content = scInet.OpenURL(PS_UPDATE_PATH & "update.php?action=getlist")
      If Instr(Content, "|||") = 0 Then
         Call psCannotConnect(): Exit Sub
      End If
      Lines = Split(Content, vbCrLf)
      strUpdates = "%4 Color Key: %1 New, %2Updated, %3Installed%4"
 
      For i = 0 to UBound(Lines)
         curLine = Split(Lines(i), "|||")
         curPrefix = LCase(curLine(1))
 
         '// Is this plugin not installed or is there a newer version available?
         If Not psPlugins.Exists(curPrefix) Then
            dispColor = "%1"
	    dlList = dlList & curPrefix & ", "
         ElseIf psVersions.Item(curPrefix) < curLine(2) Then
            dispColor = "%2"
            dlList = dlList & "[" & curPrefix & "], "
         Else
            dispColor = "%3"
	    dlList = dlList & "(" & curPrefix & "), "
         End If
 
         If Lines(i) <> vbNullString Then
            strUpdates = strUpdates & dispColor & "%4 [ " & curLine(0) & " ]%4 Plugin Version: " & curLine(2) & _
                         "%4 " & "Description: " & curLine(3) & "%4 " & "Prefix: " & curPrefix & "%4"
         End If
      Next
      If DisplayID < 4 Then
         dsp DisplayID, "Plugin Downloads: " & Left(dlList, Len(dlList) - 2), Username, 0
      Else

         If Not GetSetting("ps", "nvn") Then
            strUpdates = strUpdates & "%4" & """, 255, """ & "You aren't recieving notification of new versions for " & _
                                                             "any plugins. To reverse this type /nvn " & "ps" & " on"
         End If
         strUpdates = Replace(strUpdates, "%1", """, psColor1, """)
         strUpdates = Replace(strUpdates, "%2", """, vbCyan, """)
         strUpdates = Replace(strUpdates, "%3", """, psColor2, """)
         strUpdates = Replace(strUpdates, "%4", """ & vbCrLf & """)
         strUpdates = Replace(strUpdates, """"" &", "")
 
         AddChat vbWhite, " "
         Execute "AddChat psColor2, ""Plugins Available For Download"" & vbCrLf, vbWhite, """ & strUpdates & """"
         AddChat psColor2, "Type /getplugin PREFIX (where PREFIX is the prefix of the plugin that you want)."
      End If
 
   '* Command to download a plugin from the plugin server - Thanks SoCxFiftyToo!
   ElseIf cmdName = "getplugin" And UBound(cmd) = 1 Then
      psDownloadPlugin cmd(1), DisplayID, Username
 
   '* Command to enable/disable debug mode
   ElseIf cmdName = "debug" And UBound(cmd) = 1 Then
      If cmd(1) = "on" Or cmd(1) = "off" Then
         arrOnOff = psOnOff(cmd(1))
         dsp DisplayID, "Debug Mode has been " & arrOnOff(1) & ".", 0, arrOnOff(2)
         SetSetting "ps", "debugmode", arrOnOff(0), "", True
      End If

   ElseIf cmdName = "lset" Then
      AddChat psColor2, "Command removed -- changes to settings.ini take effect after saving the file (using /lset or Reload Script not necessary)."

   '* Command to display Plugin System news
   ElseIf cmdName = "psnews" Then
      Call psDisplayNews(True)
 
   '* Command to list all plugins currently loaded
   ElseIf cmdName = "plugins" Then
      arrPrefixes = psPlugins.Keys
      If DisplayID = 3 Or DisplayID = 1 Then
         For i = 0 to UBound(arrPrefixes)
           If Not psPluginEnabled(arrPrefixes(i)) Then
              arrPrefixes(i) = "(" & arrPrefixes(i) & ")"
           End If
         Next
         dsp DisplayID, "Loaded Plugins (" & psPlugins.Count & "): " & Join(arrPrefixes, ", "), Username, vbWhite
         Exit Sub
      End If
      For i = 0 to psPlugins.Count - 1
         If i Mod 2 = 0 Then altColor = psColor1 Else altColor = psColor2 End If
         If psPluginEnabled(arrPrefixes(i)) Then
            status = altColor & ", "" "" & vbCrLf, "
         Else
            status = "vbRed, "" (Disabled)"" & vbCrLf, "
         End If   
         plugVer = altColor & ", ""    Version:" & vbTab & ""& psVersions.Item(arrPrefixes(i)) & """ & vbCrLf, "
         fileLine = altColor & ", ""    Filename:" & vbTab & "" & psFSO.GetFileName(psPlugins.Item(arrPrefixes(i))) & """, "
         prefixLine = altColor & ", String(2, vbCrLf) & ""    Prefix:" & String(2, vbTab) & """, " & vbWhite & ", ""[ " & arrPrefixes(i)  & " ]"", "
         strPList = strPList & prefixLine & status & "vbCrLf & " & plugVer & fileLine
      Next
      AddChat vbWhite, " "
      Execute("AddChat psColor1, ""Loaded Plugins (" & psPlugins.Count & ")"", " & Left(strPList, Len(strPList) - 2))
      If Not GetSetting("ps", "enabled") Then AddChat vbRed, "Plugins have been globally disabled. To reverse this type /ps on" 

   '* Command to enable/disable new version notification for a specified plugin, or all plugins
   ElseIf cmdName = "nvn" And UBound(cmd) = 2 Then
      If psPrefixExists(cmd(1)) Then
         If cmd(2) = "on" Or cmd(2) = "off" Then
            arrOnOff = psOnOff(cmd(2))
            SetSetting cmd(1), "nvn", arrOnOff(0), "", True
            If cmd(1) = "ps" Then
               If Not arrOnOff(0) Then
                  dsp DisplayID, "New Version Notification has been globally disabled.", 0, vbRed
               Else
                  dsp DisplayID, "New Version Notficiation is no longer globally disabled.", 0, vbGreen
               End If
            Else
               dsp DisplayID, "New Version Notification for your " & cmd(1) & " " & _
                              "plugin has been " & arrOnOff(1) & ".", 0, arrOnOff(2)
            End If
         End If
      End If

      '// Toggle nvn checkmark in plugin menu
      If cmd(1) = "ps" Then boolEnabled = Not arrOnOff(0) Else boolEnabled = arrOnOff(0) End If
      SetMenuCheck psMenuIDs.Item(cmd(1))(0), psMenuIDs.Item(cmd(1))(2), boolEnabled
 
   ElseIf cmdName = "ext" And UBound(cmd) = 2 Then
      AddChat psColor2, "The ext command has been removed. Please change the extensions manually in your settings.ini file."
 
   '* Command to get help on a particular plugin (provides title, author, commands, important notes, and link to a thread)
   ElseIf cmdName = "phelp" Then

      '// Did user enter a prefix?
      If UBound(cmd) = 0 Then
         If DisplayID = 4 Then AddChat psLightBlue, "Plugin Help System"
         dsp DisplayID, "Type /phelp <prefix> to get help on one of your loaded plugins.", Username, psColor2
         dsp DisplayID, "Loaded prefixes: " & Join(psPlugins.Keys(), ", "), Username, psColor1
         If DisplayID = 4 Then AddChat psGrey, "For help with the Plugin System's commands and operation, type /phelp ps"
      Else
         '// Is this a valid prefix?   
	 If Not psPrefixExists(cmd(1)) Then Exit Sub

         '// Did they enter ps as prefix?
         If cmd(1) = "ps" Then
           If DisplayID = 4 Then
              AddChat psColor2, scINet.OpenURL(PS_UPDATE_PATH & "pscmds.txt") & vbCrLf
              AddChat psColor1, "For additional information please visit the Plugin System thread:"
              AddChat vbWhite, "http://www.stealthbot.net/board/index.php?showtopic=6052"
           Else
              strCmds = "[prefix] on/off, " & BotVars.Trigger & "plugins, " & BotVars.Trigger & "phelp [prefix]"
              dsp DisplayID, "External Plugin System Commands: " & BotVars.Trigger & strCmds, Username, 0
              dsp DisplayID, "Additional info: http://www.stealthbot.net/board/index.php?showtopic=6052", Username, 0
           End If
           Exit Sub
         End If

         '// Is help available for this plugin?   
         If Join(psHelp.Item(cmd(1)), "") = vbNullString Then
            dsp DisplayID, "Sorry, no help information is available for your " & cmd(1) & " plugin.", Username, psLightBlue
            Exit Sub
         End If

         '// If an external command, display only the commands
         If DisplayID <> 4 Then
            commands = Split(psHelp.Item(cmd(1))(1), ":")
            dsp DisplayID, "Commands: " & BotVars.Trigger & Join(commands, ", " & BotVars.Trigger), Username, 0
            Exit Sub
         End If
 
         '// Get the name and author, commands, important notes, thread url, and setting notes
         nameAndAuthor = Split(psHelp.Item(cmd(1))(0), ":")
         commands = Split(psHelp.Item(cmd(1))(1), ":")
         topicNum = psHelp.Item(cmd(1))(2)
         notes = Split(psHelp.Item(cmd(1))(3), ":")
         setNotes = Filter(Split(strSettingNotes, "||"), cmd(1) & "|")

         '// Display the help info
         AddChat psLightBlue, nameAndAuthor(0) & " by " & nameAndAuthor(1)
         AddChat vbWhite, " ": AddChat psColor2, "Commands:"
         If Join(commands, "") = vbNullString Then
            AddChat psColor2, "There are no commands for this plugin."
         Else
            For i = 0 to UBound(commands): AddChat psColor2, Space(6) & BotVars.Trigger & commands(i): Next
         End If
         If UBound(setNotes) > -1 Then
            AddChat vbWhite," ": AddChat vbYellow, "Settings.ini Notes (",vbWhite,"settingName",vbYellow, ": Setting description)"
            For i = 0 to UBound(setNotes)
               curNote = Split(setNotes(i), "|")
               AddChat vbWhite, Space(6) & curNote(1), vbYellow, ": " & curNote(2)
            Next
         End If
         If Join(notes, "") <> vbNullString Then
            AddChat vbWhite, " ": AddChat vbRed, "Other Important Notes:"
            For i = 0 to UBound(notes): AddChat vbRed, Space(6) & "-" & Replace(notes(i), "\c", ":"): Next
         End If
         If topicNum <> vbNullString Then
            url = "http://www.stealthbot.net/forumn/index.php?showtopic=" & topicNum
            AddChat vbWhite, " ": AddChat psColor1, "Visit " & url & " for additional information on this plugin."
         End If
      End If

   '* Command to delete a plugin
   ElseIf cmdName = "delplugin" And UBound(cmd) > 0 Then
      If Not psPlugins.Exists(cmd(1)) Then
         AddChat vbRed, "Invalid command: None of your loaded plugins have prefix """ & cmd(1) & """."
         Exit Sub
      Else
         If Not psFSO.FileExists(psPlugins.Item(cmd(1))) Then
            AddChat psColor2, "That plugin has already been deleted."
         Else

            '// Back up the plugin file that's about to be deleted
            If UBound(cmd) > 1 Then
               If cmd(2) <> 1 Then bkup = True
            Else
               bkup = True
            End If 
            If bkup Then psBackUpFile psPlugins.Item(cmd(1)), psVersions.Item(cmd(1))

            '// Delete the file
            psFSO.DeleteFile(psPlugins.Item(cmd(1)))
            dsp DisplayID, "The " & cmd(1) & " plugin has been deleted.", Username, psLightBlue
            AddChat psColor2, "Reloading Script...": Call ReloadScript()
         End If
      End If
   
   '* Command to open files for editing
   ElseIf cmdName = "pedit" Then
      If UBound(cmd) = 0 Then
         path = BotPath() & PS_SET_PATH
      ElseIf cmd(1) = "plugins" Then
         path = BotPath() & cmd(1)
      Else
         If Instr(cmd(1), ".") Then
	    If psFSO.FileExists("plugins\" & cmd(1)) Then
               path = BotPath() & "plugins\" & cmd(1)
            Else
               AddChat vbRed, "Invalid command: The file """ & cmd(1) & """ doesn't exist in your plugins folder."
               Exit Sub
            End If
         Else
            If Not psPrefixExists(cmd(1)) Then Exit Sub

	    If cmd(1) = "ps" Then
               path = BotPath() & "PluginSystem.dat"
            Else
               path = psPlugins.Item(cmd(1))
            End If
         End If
      End If
      dsp DisplayID, "Opening: " & path, 0, psColor2
      psAppShell.Open path
   End If
End Sub

 
Sub psCreatePSSettings()

   SetSetting "ps", "conup", 0, "Internal setting -- do not modify", False
   SetSetting "ps", "enabled", True, "If enabled is set to False here, ALL plugins are disabled.", False
   SetSetting "ps", "nvn", True, "New Version Notification. If set to False here, you won't " & _
                                 "get pop-up notification of new versions for ANY plugins.", False
   SetSetting "ps", "backup", False, "If True, plugin files will be backed up when updates are downloaded.", False
   SetSetting "ps", "menu_display", True, "If True, Plugin System options will be displayed in Scripts menu", False
   SetSetting "ps", "debugmode", False, "Stores the debug mode status", False
   SetSetting "ps", "allowedExtensions", "plug,txt", "Plugins will be loaded from files with these extensions", False
   SetSetting "ps", "autoConvertToPlugin", True, "Automatically converts regular scripts to plugin form on load.", False
   SetSetting "ps", "multipleCmdMsgs", True, "Allows for multiple commands in a single message.", False
   SetSetting "ps", "newsDisabled", False, "Plugin System News. Set to True to disable.", False
   SetSetting "ps", "menusDisabled", False, "Plugin menus. Set to True to disable.", False
   SetSetting "ps", "prefix_cmd_access", 100, "Access required to use the .prefix on/off command", False
   SetSetting "ps", "plugins_cmd_access", 20, "Access required to use the .plugins command", False
   SetSetting "ps", "phelp_cmd_access", 20, "Access required to use the .phelp command", False
End Sub


Sub psLoadPlugins()

   If Not psLatestSB() Then Exit Sub
   On Error Resume Next

   '// Create an array of all existing StealthBot events
   psEventNames = Split("load|firstrun|serverinfo|servererror|usertalk|useremote|whisperfromuser|userjoins|" & _
                        "userleaves|flagupdate|loggedon|loggedoff|userinchannel|channeljoin|pressedenter|keyreturn|" & _
                        "messagesent|claninfo|clanmemberlist|clanmemberupdate|clanmotd|clanmemberleaves|" & _
                        "botremovedfromclan|botclanrankchanged|botjoinedclan|botclaninfo|close|shutdown", "|")

   '// Get list of allowed plugin file extensions
   extensions = LCase(GetSetting("ps", "allowedExtensions")) & ","
 
   '// Check each file in the plugins folder to see if it should be loaded
   For Each File In psFSO.GetFolder("plugins").Files

      Set curFile = psFSO.GetFile(File)
      If curFile.Size > 0 Then
 
         '// Check if the current file has one of the allowed plugin file extensions (plug or txt by default)
         If Instr(extensions, psFSO.GetExtensionName(File) & ",") Then

            strPlugin = psGetTextStream(File)
            arrPlugin = Split(strPlugin, vbCrLf)
            curPrefix = Mid(Trim(LCase(arrPlugin(0))), 2)
            curVersion = Mid(Trim(arrPlugin(1)), 2)
 
            '// Check if the file contents are in plugin form
            If Left(arrPlugin(0), 1) = "'" And Instr(curPrefix, " ") = 0 And UBound(arrPlugin) > 1 Then

               '// Check prefix and version validity
               pcErr = psPrefixCheck(curPrefix)
               If Len(pcErr) > 0 Then
                  AddChat vbRed, "Did not load plugin in file ", vbWhite, psFSO.GetFileName(File), vbRed, ". " & pcErr & "."
               ElseIf psGetNumericVersion(curVersion) < 0 Then
                  AddChat vbRed, "Did not load plugin in file ", vbWhite, psFSO.GetFileName(File), vbRed, ". Its version """ & curVersion & """ is invalid."
               Else      

                  '// Everything checks out, let's load this plugin!
                  psLoadPlugin curPrefix, curVersion, File, strPlugin, arrPlugin
                  If psPluginEnabled(curPrefix) Then enCount = enCount + 1
               End If
               
            Else

               '// If this file contains a StealthBot VBScript, convert it to plugin form
               If UBound(Filter(arrPlugin, "event_", 1, 1)) > -1 Then psConvertToPlugin File, arrPlugin
            End If
         End If
      End If
   Next
   psLoaded = True
 
   AddChat psColor1, "Loaded " & psPlugins.Count & " plugins (" & CInt(enCount) & " enabled). Type ", psColor2, "/plug" & _
                     "ins", psColor1, " to view them. Type ", psColor2, "/phelp", psColor1, " for help using them."
   AddChat psColor1, "Type ", psColor2, "/updates", psColor1, " in the bot to view updates and new plugins that are " & _
                     "available for download."
End Sub

 
Sub psLoadPlugin(Prefix, Version, Path, Content, Lines)

   '// Get the names of all events that exist in this plugin
   psArgsAdded = False
   psEvents.Item(Prefix) = "|"
   For i = 0 to UBound(Lines)
      curLine = Trim(LCase(Lines(i)))

      If Instr(curLine, "event_") > 0 Then

         For j = 0 to UBound(psEventNames)
            curEventLine = "sub " & Prefix & "_event_" & psEventNames(j)
            If Left(curLine, Len(curEventLine)) = curEventLine Then
               psEvents.Item(Prefix) = psEvents.Item(Prefix) & psEventNames(j) & "|"
            End If
         Next
 
         '// If it's a UserJoins or UserInChannel event, make sure the new arguments exist
         If Instr(curLine, "userjoins") > 0 And Instr(curLine, "banned") = 0 Then
            psAddArg Prefix, i, "UserJoins", "OriginalStatString", "Banned", Lines, Path
         ElseIf Instr(curLine, "userinchannel") > 0 And Instr(curLine, "statupdate") = 0 Then
            psAddArg Prefix, i, "UserInChannel", "Product", "StatUpdate", Lines, Path
         End If
      End If
   Next

   '// Load this plugin's code
   On Error Resume Next
   If psArgsAdded Then Content = psNewContent
   psSC.AddCode Content

   '// Handle loading errors
   If Err.Number <> 0 And GetPluginEnabled(Prefix) Then
      psLoadError.Item(Prefix) = True
      AddChat vbRed, "Offending file: >> " & Path
      AddChat vbYellow, "Your " & Prefix & " plugin has been temporarily blocked due to a loading error."
      Err.Clear
   Else
      psLoadError.Item(Prefix) = False
   End If

   '// Register this plugin by storing it's path and version
   psPlugins.Item(Prefix) = Path
   psVersions.Item(Prefix) = Version

   '// Get any help information provided by this plugin
   If IsArray(Lines) Then
      If UBound(Lines) > 4 Then 
         ReDim arrHelp(3)
         For i = 2 to 5
            If Left(Lines(i), 2) = "'&" Then arrHelp(i - 2) = Trim(Mid(Lines(i), 3))
         Next
         psHelp.Add Prefix, arrHelp
      End If
   End If

   '// Create the default settings for this plugin
   SetSetting Prefix, "enabled", True, "", False
   SetSetting Prefix, "menu_display", True, "", False
   SetSetting Prefix, "nvn", True, "", False
   SetSetting Prefix, "backup", False, "", False
End Sub


Sub psAddArg(Prefix, Index, EventName, LastArg, NewArg, Lines, Path)

   For i = 0 to UBound(Lines)
     If i = Index Then Lines(i) = Replace(Lines(i), LCase(LastArg), LastArg & ", " & NewArg, 1, -1, 1)
   Next

   psNewContent = Join(Lines, vbCrLf)
   Set pFile = psFSO.OpenTextFile(Path, 2, 1)
   pFile.WriteLine psNewContent
   pFile.Close
   psArgsAdded = True
End Sub
 
 
Sub psConvertToPlugin(Path, Lines)

   '// Is the plugin converter disabled?
   If Not GetSetting("ps", "autoConvertToPlugin") Then Exit Sub

   fileName = Mid(Path, InstrRev(Path, "\") + 1)
   convertNow = MsgBox("A file in your plugins folder contains a script that isn't in plugin format: " & _
                        fileName & String(2, vbCrLf) & "Would you like to convert this script to plugin " & _
                       "format now?", vbYesNoCancel + vbQuestion + vbApplicationModal, "Plugin Converter")

   If convertNow = vbYes Then
 
      '// Get the desired prefix for the converted plugin
      Do
         prefix = LCase(InputBox("Enter a prefix for this plugin.", "Plugin Converter"))
         askAgain = False
 
         '// Make sure they've entered something
         If Trim(prefix) = vbNullString Then
            MsgBox "You must enter a prefix.", vbExclamation + vbApplicationModal, "Plugin Converter"
            askAgain = True
         Else
            '// Make sure they've entered a valid prefix
            If psPlugins.Exists(prefix) Then
               MsgBox "The prefix """ & prefix & """ already exists.", vbExclamation + vbApplicationModal, "Plugin Converter"
               askAgain = True
            ElseIf Instr(prefix, " ") Then
               MsgBox "You can't have spaces in your prefix.", vbExclamation + vbApplicationModal, "Plugin Converter"
               askAgain = True
            ElseIf Len(psPrefixCheck(prefix)) > 0 Then
               MsgBox "Invalid prefix.", vbExclamation + vbApplicationModal, "Plugin Converter"
               askAgain = True
            End If
         End If
      Loop While askAgain
 
      '// Convert the code to plugin form
      For i = 0 to UBound(Lines)
 
         '// Convert event sub headers and event calls
         If Instr(LCase(Lines(i)), "event_") Then
	    If Instr(Replace(LCase(Lines(i)), " ", ""), "subevent") > 0 Then
              Lines(i) = Replace(Lines(i), "event_", prefix & "_event_", 1, -1, 1)
            Else
              Lines(i) = Replace(Lines(i), "  ", " ")
              Lines(i) = Replace(Lines(i), Split(Split(Lines(i))(1), "_")(0), prefix)
            End If
 
         '// Convert timer code
         ElseIf Instr(Replace(LCase(Lines(i)), " ", ""), "sctimer.interval=") Then
            interval = Mid(Lines(i), Instr(Lines(i), "=") + 1)
            Lines(i) = "TimerInterval """ & prefix & """,""" & prefix & "Timer""," & CInt(interval) \ 1000
         ElseIf Instr(Replace(LCase(Lines(i)), " ", ""), "sctimer.enabled=") Then
            bool = Mid(Lines(i), Instr(Lines(i), "=") + 1)
            Lines(i) = "TimerEnabled """ & prefix & """,""" & prefix & "Timer""," & bool
         ElseIf Instr(LCase(Lines(i)), "sctimer.enabled") Then
            convertedLine = "GetTimerEnabled(""" & prefix & """,""" & prefix & "Timer"")"
            Lines(i) = Replace(Lines(i), "sctimer.enabled", convertedLine, 1, -1, 1)
         ElseIf Left(LCase(Lines(i)), 19) = "sub sctimer_timer()" Then
            Lines(i) = "sub " & prefix & "_" & prefix & "Timer_Timer()"
         End If
      Next
 
      '// Write the prefix and version line, and the converted code
      Set pluginFile = psFSO.OpenTextFile(Path, 2, 1)
      With pluginFile
         .WriteLine "'" & prefix & vbCrLf & "'1.0" & vbCrLf
         .WriteLine Join(Lines, vbCrLf)
         .Close
      End With   
 
      '// Has a plugin with the same prefix already been loaded?
      If psPlugins.Exists(curPrefix) then
         AddChat vbRed, "A plugin file was not loaded, as it's prefix "" & curPrefix & "" already exists: " & fileName
      Else
         '// Load the converted plugin
         AddChat psColor2, "Successfully converted a script to plugin format with prefix """ & prefix & """ in file: " & fileName
         strPlugin = psGetTextStream(Path)
         psLoadPlugin prefix, "1.0", Path, strPlugin, Split(strPlugin, vbCrLf)
      End If
   End If
End Sub

 
Sub psBackUpFile(Path, Version)

   If Not psFSO.FileExists(Path) Then Exit Sub
   If Not psFSO.FolderExists("ScriptBackups\") Then psFSO.CreateFolder("ScriptBackups\")

   fileName = psFSO.GetBaseName(Path)
   fileExt = psFSO.GetExtensionName(Path)
   buName = fileName & "(v" & Version & ")"
   buPathStart = BotPath() & "ScriptBackups\" & buName

   fileContents = psGetTextStream(Path)
   Do
      buNum = buNum + 1
      buPath = buPathStart & buNum & "." & fileExt
      If Not psFSO.FileExists(buPath) Or buNum > 4 Then
         Set File = psFSO.OpenTextFile(buPath, 2, True)
         File.WriteLine(fileContents)
         File.Close
         AddChat vbCyan, fileName & "." & fileExt & " backed up in file> " & "ScriptBackups\" & buName & buNum & "." & fileExt
         Exit Do
      End If
   Loop
End Sub
 

Sub psDownloadPlugin(Prefix, DisplayID, Username)

   Content = scInet.OpenURL(PS_UPDATE_PATH & "update.php?action=getscript&script=" & Prefix)
   If Content = "invalid" Then
     AddChat vbRed, "Invalid command: None of the plugins available for download have prefix """ & Prefix & """."
     AddChat vbRed, "Type /updates to view the prefixes of available plugins."
     Exit Sub
   ElseIf Instr(Content, "|") = 0 Then
     Call psCannotConnect()
     Exit Sub
   End If

   '// Do we need to back up an existing version before we download?
   If psPlugins.Exists(Prefix) Then
      If GetSetting(Prefix, "backup") Or GetSetting("ps", "backup") Then
        psBackUpFile psPlugins.Item(Prefix), psVersions.Item(Prefix)
      End If
   End If

   '// Get names of needed files
   cvars = Split(Content, "|")
   If Right(cvars(0),1) = "," Then
     cvars(0) = Left(cvars(0), Len(cvars(0)) - 1)
   End If
   Files = Split(cvars(0), ",")
   pluginFileName = Mid(Files(0), 20) & ".plug"      

   '// Download the plugin
   AddChat psLightBlue, "Downloading File: " & pluginFileName
   SSC.PrintURLToFile "plugins\" & pluginFileName, PS_UPDATE_PATH & Files(0)

   If Not psPlugins.Exists(Prefix) Then

      '// Download the additonal files (if any)
      If UBound(Files) > 0 Then AddChat vbWhite, "*** NOTE: If you get a Script Control pop-up, hit Continue. Hitting End will cause errors!"
      For i = 1 to UBound(Files)
        AddChat psLightBlue, "Downloading File: " & Files(i)
	If Files(i) <> "" Then SSC.PrintURLToFile "plugins\" & Files(i), PS_UPDATE_PATH & Files(i)
      Next

      '// This is a new plugin, load it up
      strPlugin = psGetTextStream("plugins\" & pluginFileName)
      psLoadPlugin Prefix, cvars(2), BotPath() & "plugins\" & pluginFileName, strPlugin, Split(strPlugin, vbCrLf)
      psTriggerLoadEvent Prefix
      If DisplayID = 4 Then trig = "/" Else trig = BotVars.Trigger End If
      dsp DisplayID, "The " & cvars(1) & " plugin installed and loaded successfully. For help, " & _
		     "type """ & trig & "phelp " & Prefix & """ inside your bot.", Username, psColor1
   Else
      dsp DisplayID, "The " & cvars(1) & " plugin was updated successfully.", Username, psColor1
      AddChat psColor2, "Reloading Script...": Call ReloadScript()
   End If
End Sub


Sub psAutoUpdate()
  
   '// Check for plugin system updates
   If PS_AUTO_UPDATE Then
      On Error Resume Next
      curPSVersion = scINet.OpenURL(PS_UPDATE_PATH & "update.php?action=sctxtver")
      If Len(curPSVersion) = 0 Or Instr(curPSVersion, " ") Then
         Call psCannotConnect(): Exit Sub
      End If
      Set myPluginScript = psFSO.OpenTextFile("PluginSystem.dat", 1)
      myPSVersion = Mid(myPluginScript.ReadLine(), 2)
      myPluginScript.Close
 
      '// Is there are newer Plugin System version available?
      If Len(myPSVersion) > 0 Then
         If psGetNumericVersion(curPSVersion) > psGetNumericVersion(myPSVersion) Then
            AddChat psLightBlue, "Downloading update for the Plugin System."
            psBackUpFile BotPath() & "PluginSystem.dat", myPSVersion
            PrintURLToFile "PluginSystem.dat", PS_UPDATE_PATH & "PluginSystem.dat"
            AddChat psColor1, "Your Plugin System has been updated."
            AddChat psColor2, "Reloading Script...": Call ReloadScript()
         End If
      End If
   End If

   '// Check for plugin updates
   On Error Resume Next
   Content = scInet.OpenURL(PS_UPDATE_PATH & "update.php?action=getlist")
   Lines = Split(Content, vbCrLf)
   For i = 0 to UBound(Lines)
      curLine = Split(Lines(i), "|||")

      '// Is this plugin installed?
      If psPlugins.Exists(curLine(1)) Then

         '// Is the available version greater than the local version?
         If psGetNumericVersion(curLine(2)) > psGetNumericVersion(psVersions.Item(curLine(1))) Then

            '// If enabled, notify user of new version
            If GetSetting(curLine(1), "nvn") And GetSetting("ps", "nvn") Then

               updateNow = MsgBox("A new version (v" & curLine(2) & ") is available for your " & curLine(0) & " plugin. " & _
                                  "Automatically update this plugin now?" & String(2, vbCrLf) & "To stop receiving new " & _
                                  "version notifications for this plugin, type this inside your bot: /nvn " & curLine(1) & _
                                  " off", vbYesNoCancel + vbQuestion + vbApplicationModal, "New Version Notification")

               If updateNow = vbYes Then psDownloadPlugin curLine(1), 4, 0
            End If
         End If
      End If
   Next
End Sub


Sub psRegisterMenus()

   If GetSetting("ps", "menusDisabled") Then Exit Sub
   arrPrefixes = psPlugins.Keys

   '// Register main help menu
   intHelpMenuID = RegisterScriptMenu("- Scripting Help")
   AddScriptMenuItem intHelpMenuID, "Scripting Tutorials and FAQs", "ps_mainhelp1_callback", 0, 0
   AddScriptMenuItem intHelpMenuID, "Scripting and Plugins Support", "ps_mainhelp2_callback", 0, 0   
   AddScriptMenuItem intHelpMenuID, "The Plugin System Guide", "ps_mainhelp3_callback", 0, 0
   AddScriptMenuItem intHelpMenuID, "The Plugin System FAQ", "ps_mainhelp4_callback", 0, 0
   psSC.AddCode "Sub ps_mainhelp1_callback:psAppShell.Open ""http://www.stealthbot.net/board/index.php?showforum=53"":End " & "Sub"
   psSC.AddCode "Sub ps_mainhelp2_callback:psAppShell.Open ""http://www.stealthbot.net/board/index.php?showforum=11"":End " & "Sub"
   psSC.AddCode "Sub ps_mainhelp3_callback:psAppShell.Open ""http://www.stealthbot.net/board/index.php?showtopic=6052"":End " & "Sub"
   psSC.AddCode "Sub ps_mainhelp4_callback:psAppShell.Open ""http://www.stealthbot.net/board/index.php?showtopic=22229"":End " & "Sub"

   '// Register display menu
   intDisplayMenuID = RegisterScriptMenu("- Display In Menu")
 
   '// Register menus for the plugin system and each plugin
   For i = -1 to UBound(arrPrefixes)    

      '// Get an appropriate name for this plugin (use plugin title from pshelp if available)
      If i < 0 Then
         strPrefix = "ps"
         strMenuName = "The Plugin System"
      Else
         strPrefix = arrPrefixes(i)
         strMenuName = vbNullString	  
         If IsArray(psHelp.Item(strPrefix)) Then
            If Len(Join(psHelp.Item(strPrefix), "")) > 0 Then
               strMenuName = Split(psHelp.Item(strPrefix)(0), ":")(0)
            End If
         End If
         If Len(strMenuName) = 0 Then strMenuName = strPrefix
      End If

      '// Add this plugin as an item in the display menu
      intDisplayID = AddScriptMenuItem(intDisplayMenuID, strMenuName, "ps_display_redirect_" & strPrefix, 0, 0, GetSetting(strPrefix, "menu_display"))
      psSC.AddCode "Sub ps_display_redirect_" & strPrefix & ":psMenus_Display_Callback """ & strPrefix & """:End " & "Sub"
   
      '// Should a menu for this plugin be displayed?
      If GetSetting(strPrefix, "menu_display") Then

         '// Register a menu for this plguin
         intMenuID = RegisterScriptMenu(strMenuName)

         '// Add menu items for this plugin (enabled, nvn, backups, help, and an open file action)
         If strPrefix = "ps" Then
            intEnabledID = AddScriptMenuItem(intMenuID, "Globally Disable Plugins", "ps_enabled_redirect_" & strPrefix, 0, 0, Not GetSetting(strPrefix, "enabled"))
            intNVNID = AddScriptMenuItem(intMenuID, "Globally Disable NVN", "ps_nvn_redirect_" & strPrefix, 0, 0, Not GetSetting(strPrefix, "nvn"))
            intBackupID = AddScriptMenuItem(intMenuID, "Globally Enable Plugin Backups", "ps_backup_redirect_" & strPrefix, 0, 0, GetSetting(strPrefix, "backup"))
            AddScriptMenuItem intMenuID, 1, 1, 1 '// Separator
            AddScriptMenuItem intMenuID, "Open settings.ini", "ps_opensettings_redirect", 0, 0
            AddScriptMenuItem intMenuID, "Open plugins folder", "ps_openplugins_redirect", 0, 0
            AddScriptMenuItem intMenuID, "Open PluginSystem.dat", "ps_openfile_redirect_" & strPrefix, 0, 0
            AddScriptMenuItem intMenuID, 1, 1, 1
            AddScriptMenuItem intMenuID, "Create New Plugin", "psMenus_CreatePlugin_Callback", 0, 0
            AddScriptMenuItem intMenuID, "Help", "ps_help_redirect_" & strPrefix, 0, 0
            psSC.AddCode "Sub ps_opensettings_redirect:psPluginSystemCmds ""/pedit"", """ & BotVars.Username & """, 4:End " & "Sub"
            psSC.AddCode "Sub ps_openplugins_redirect:psPluginSystemCmds ""/pedit plugins"", """ & BotVars.Username & """, 4:End " & "Sub"
         Else
            intEnabledID = AddScriptMenuItem(intMenuID, "Enabled", "ps_enabled_redirect_" & strPrefix, 0, 0, GetSetting(strPrefix, "enabled"))
            intNVNID = AddScriptMenuItem(intMenuID, "New Version Notification", "ps_nvn_redirect_" & strPrefix, 0, 0, GetSetting(strPrefix, "nvn"))
            intBackupID = AddScriptMenuItem(intMenuID, "Backup File On Updates", "ps_backup_redirect_" & strPrefix, 0, 0, GetSetting(strPrefix, "backup"))
            AddScriptMenuItem intMenuID, 1, 1, 1
            AddScriptMenuItem intMenuID, "Open File", "ps_openfile_redirect_" & strPrefix, 0, 0
            AddScriptMenuItem intMenuID, "Help", "ps_help_redirect_" & strPrefix, 0, 0
         End If

         '// Create parameter free callback subs which will redirect to the appropriate sub below
         psSC.AddCode "Sub ps_enabled_redirect_" & strPrefix & ":psMenus_Enabled_Callback """ & strPrefix & """:End " & "Sub"
         psSC.AddCode "Sub ps_nvn_redirect_" & strPrefix & ":psMenus_NVN_Callback """ & strPrefix & """:End " & "Sub"
         psSC.AddCode "Sub ps_backup_redirect_" & strPrefix & ":psMenus_Backup_Callback """ & strPrefix & """:End " & "Sub"
         psSC.AddCode "Sub ps_openfile_redirect_" & strPrefix & ":psPluginSystemCmds ""/pedit " & strPrefix & """, """ & BotVars.Username & """, 4:End " & "Sub"
         psSC.AddCode "Sub ps_help_redirect_" & strPrefix & ":psPluginSystemCmds ""/phelp " & strPrefix & """, """ & BotVars.Username & """, 4:End " & "Sub"
      End If

      '// Store ID numbers for the menu and its check-enabled items
      psMenuIDs.Item(strPrefix) = Array(intMenuID, intEnabledID, intNVNID, intBackupID, intDisplayID)
   Next
End Sub


Sub psMenus_Display_Callback(Prefix)

   If GetSetting(Prefix, "menu_display") Then boolEnabled = False Else boolEnabled = True End If

   SetSetting Prefix, "menu_display", boolEnabled, "", True

   '// Toggle backup checkmark in plugin menu
   SetMenuCheck psMenuIDs.Item(Prefix)(0), psMenuIDs.Item(Prefix)(4), boolEnabled

   AddChat psOrange, "Reloading Script...": ReloadScript()
End Sub


Sub psMenus_CreatePlugin_Callback()

  If psFSO.FileExists("PluginCreator.exe") Then
    psWshShell.Run "PluginCreator.exe"
  Else
    AddChat vbRed, "File not found: " & BotPath() & "PluginCreator.exe"
    AddChat vbYellow, "Downloading Plugin Creator. If you receive any Script Control dialogs, hit Continue!"
    SSC.PrintURLToFile "PluginCreator.exe", "http://www.stealthbot.net/p/plugs/PluginCreator.exe"
    AddChat vbGreen, "Downloaded PluginCreator.exe to your StealthBot folder. You may now use the Create New Plugin function."
  End If
End Sub


Sub psMenus_Enabled_Callback(Prefix)

   If GetSetting(Prefix, "enabled") Then
      psPluginSystemCmds "/" & Prefix & " off", BotVars.Username, 4
   Else
      psPluginSystemCmds "/" & Prefix & " on", BotVars.Username, 4
   End If
End Sub


Sub psMenus_NVN_Callback(Prefix)

   If GetSetting(Prefix, "nvn") Then
      psPluginSystemCmds "/nvn " & Prefix & " off", BotVars.Username, 4
   Else
      psPluginSystemCmds "/nvn " & Prefix & " on", BotVars.Username, 4
   End If
End Sub


Sub psMenus_Backup_Callback(Prefix)

   If GetSetting(Prefix, "backup") Then boolEnabled = False Else boolEnabled = True End If
   SetSetting Prefix, "backup", boolEnabled, "", True

   '// Toggle backup checkmark in plugin menu
   SetMenuCheck psMenuIDs.Item(Prefix)(0), psMenuIDs.Item(Prefix)(3), boolEnabled
End Sub


Sub psExecuteEvent(EventName, Parameters)

   If Not (GetSetting("ps", "enabled") And psLoaded) Or (EventName = "FirstRun" And Not psFirstRun) Then Exit Sub
   Err.Clear: If Not GetSetting("ps", "debugmode") Then On Error Resume Next
   arrPrefixes = psPlugins.Keys

   '// In each plugin execute this event with parameter values passed from the actual event sub below
   For i = 0 to psPlugins.Count - 1

      '// Is this plugin enabled, and does this event exist in this plugin?
      If GetSetting(arrPrefixes(i), "enabled") And Instr(psEvents.Item(arrPrefixes(i)), "|" & LCase(EventName) & "|") Then

         '// Call the specified event sub in this plugin
         If Len(Parameters(0)) > 0 Then
            For j = 0 to UBound(Parameters)
               paramString = paramString & "psEcho(Parameters(" & j & "))" & ","
            Next
            paramString = Left(paramString, Len(paramString) - 1)
         End If
         Execute("Call " & arrPrefixes(i) & "_Event_" & EventName & "(" & paramString & ")")
 
         '// Handle errors
         If Err.Number <> 0 Then
            AddChat vbRed, "Scripting runtime error '" & Err.Number & "' on """ & arrPrefixes(i) & "_Event_" & _
                            EventName & """ call in file """ & psFSO.GetFileName(psPlugins.Items()(i)) & """"
	    AddChat vbRed, Err.Description & "."
     
            Err.Clear
         End If
      End If
      paramString = vbNullString
   Next
End Sub
 

'// [[[ EVENTS ]]]


Sub Event_Load()

   '// Finish the installation
   Call psCompleteInstall()

   '// Modify config to allow MsgBox's
   Call psAllowUI()
 
   '// Set color values
   Call psSetPSColors()
 
   '// Make dictionaries non-case sensitive
   Call psSetCompareMode()
 
   '// Create the plugin system settings
   Call psCreatePSSettings()

   '// Display Plugin System news
   Call psDisplayNews(psFirstRun)

   '// Load the plugins
   Call psLoadPlugins()

   '// Register the scripts menus
   Call psRegisterMenus()

   '// Enable the script timer
   scTimer.Interval = 1000
   scTimer.Enabled = True

   psExecuteEvent "FirstRun", Array(vbNullString)
   psExecuteEvent "Load", Array(vbNullString)
End Sub


Sub Event_FirstRun()

   SetSCTimeout PS_TIMEOUT * 1000
   psFirstRun = True
End Sub
 
 
Sub Event_ServerInfo(Message)
 
   If Message = "Welcome to Battle.net!" Then psConUptime = 0
   psExecuteEvent "ServerInfo", Array(Message)
End Sub
 
 
Sub Event_ServerError(Message)

   psExecuteEvent "ServerError", Array(Message)
End Sub
 
 
Sub Event_UserTalk(Username, Flags, Message, Ping)

   psPluginSystemCmds Message, Username, 3
 
   '// Is it a multiple command message?
   If Left(Message, 1) = BotVars.Trigger And Instr(Message, "; ") Then
     arrMessage = Split(Mid(Message, 2), "; ")
     ReDim arrCmd(UBound(arrMessage))
     For i = 0 to UBound(arrCmd)
       psExecuteEvent "UserTalk", Array(Username, Flags, Left(Message, 1) & arrMessage(i), Ping)
     Next
     Exit Sub
   End If

   psExecuteEvent "UserTalk", Array(Username, Flags, Message, Ping)
End Sub
 
 
Sub Event_UserEmote(Username, Flags, Message)
 
   psPluginSystemCmds Message, Username, 3
   psExecuteEvent "UserEmote", Array(Username, Flags, Message)
End Sub
 
 
Sub Event_WhisperFromUser(Username, Flags, Message)

   psPluginSystemCmds Message, Username, 3
   psExecuteEvent "WhisperFromUser", Array(Username, Flags, Message)
End Sub
 
 
Sub Event_UserJoins(Username, Flags, Message, Ping, Product, Level, OriginalStatstring, Banned)
 
   psExecuteEvent "UserJoins", Array(Username, Flags, Message, Ping, Product, Level, OriginalStatstring, Banned)
End Sub
 
 
Sub Event_UserLeaves(Username, Flags)
 
   psExecuteEvent "UserLeaves", Array(Username, Flags)
End Sub
 
 
Sub Event_FlagUpdate(Username, NewFlags, Ping)
 
   psExecuteEvent "FlagUpdate", Array(Username, NewFlags, Ping)
End Sub
 
 
Sub Event_LoggedOn(Username, Product)
 
   psConUptime = GetSetting("ps", "conup")
   Call psAutoUpdate()
   If Product = "VD2D" Or Product = "PX2D" Then psD2 = "*" Else psD2 = vbNullString End If   
   psExecuteEvent "LoggedOn", Array(Username,Product)
End Sub


Sub Event_LoggedOff()

   psExecuteEvent "LoggedOff", Array(vbNullString)
End Sub
 
 
Sub Event_UserInChannel(Username, Flags, Message, Ping, Product, StatUpdate)
 
   psExecuteEvent "UserInChannel", Array(Username, Flags, Message, Ping, Product, StatUpdate)
End Sub
 
 
Sub Event_ChannelJoin(ChannelName, Flags)
 
   psExecuteEvent "ChannelJoin", Array(ChannelName,Flags)
End Sub
 
 
Sub Event_PressedEnter(Text)

   If Len(Text) > 220 Then psSplitOutgoingMsg Text
   psPluginSystemCmds psEcho(Text), BotVars.Username, 4
   psExecuteEvent "PressedEnter", Array(Text)
End Sub
 
 
Sub Event_KeyReturn(KeyName, KeyValue)
 
   psExecuteEvent "KeyReturn", Array(KeyName, KeyValue)
End Sub
 
 
Sub Event_MessageSent(Message)
 
   psExecuteEvent "MessageSent", Array(Message)
End Sub


Sub Event_ClanInfo(Name, Rank, Online)

   psExecuteEvent "ClanInfo", Array(Name, Rank, Online)
End Sub


Sub Event_ClanMemberList(Username, Rank, Online)

   psExecuteEvent "ClanMemberList", Array(Username, Rank, Online)
End Sub


Sub Event_ClanMemberUpdate(Username, Rank, Online)

   psExecuteEvent "ClanMemberUpdate", Array(Username, Rank, Online)
End Sub


Sub Event_ClanMOTD(Message)
 
   psExecuteEvent "ClanMOTD", Array(Message)
End Sub


Sub Event_ClanMemberLeaves(Username)

   psExecuteEvent "ClanMemberLeaves", Array(Username)
End Sub


Sub Event_BotRemovedFromClan()

   psExecuteEvent "BotRemovedFromClan", Array(vbNullString)
End Sub


Sub Event_BotClanRankChanged(NewRank)

   psExecuteEvent "BotClanRankChanged", Array(NewRank)
End Sub


Sub Event_BotJoinedClan(ClanTag)

   psExecuteEvent "BotJoinedClan", Array(ClanTag)
End Sub


Sub Event_BotClanInfo(ClanTag, Rank)

   psExecuteEvent "BotClanInfo", Array(ClanTag, Rank)
End Sub


Sub Event_Close()
   
   SetSetting "ps", "conup", psConUptime, "", True
   psExecuteEvent "Close", Array(vbNullString)
End Sub


Sub Event_Shutdown()

   psExecuteEvent "Shutdown", Array(vbNullString)
End Sub
 
 
'// [[[ SCRIPT TIMER ]]]
 
Sub scTimer_Timer()

   '// This sub executes every 1000 milliseconds (1 second)

   '// Update connection uptime
   If IsOnline() Then psConUptime = psConUptime + 1 Else psConUptime = 0 End If

   If Not GetSetting("ps", "enabled") Then Exit Sub
   Err.Clear: If Not GetSetting("ps", "debugmode") Then On Error Resume Next
   teKeys = psTimerEnabled.Keys
 
   '// Execute all existing plugin timer subs at the appropriate intervals
   For i = 0 to psTimerEnabled.Count - 1

      '// Is this timer enabled?
      If psTimerEnabled.Item(teKeys(i)) Then
         arrTimerKey = Split(teKeys(i), ":")
         strPrefix = arrTimerKey(0)
         strTimerName = arrTimerKey(1)

         '// Is the plugin that this timer belongs to enabled?
         If GetSetting(strPrefix, "enabled") Then

            '// Has this timer reached the end of its interval countdown?
            If psTimerCount.Item(teKeys(i)) = 1 Then

               '// Execute this timer sub!
               Execute("Call " & strPrefix & "_" & strTimerName & "_timer()")

               '// Handle errors
               If Err.Number <> 0 Then
                  AddChat vbRed, "Timer """ & strTimerName & """ Call Error On File> " & psPlugins.Item(strPrefix)
                  AddChat vbRed, "Error Number: " & Err.Number & "   Description: " & Err.Description
                  AddChat vbYellow, "The """ & strTimerName & """ timer in your " & strPrefix & " plugin has been disabled due to an error."
                  TimerEnabled strPrefix, strTimerName, False
                  Err.Clear
               End If
               psTimerCount.Item(teKeys(i)) = psTimerInterval.Item(teKeys(i))
            Else
               '// Subtract one second from the interval countdown
               psTimerCount.Item(teKeys(i)) = psTimerCount.Item(teKeys(i)) - 1
            End If
         End If
      End If
   Next
End Sub